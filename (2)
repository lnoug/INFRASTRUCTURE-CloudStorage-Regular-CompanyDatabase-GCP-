# 4. Create a Cloud Function

A Cloud Function is a piece of code that runs in response to an event. In our case, the Cloud Function will run when a new message is received from Pub/Sub. To create a Cloud Function, follow these steps:

1. Go to the Cloud Functions Console and create a new function.
2. Create a function that is triggered by the Pub/Sub subscription.
3. Write code that parses the message and stores it in Firestore.

CODE:
const {Firestore} = require('@google-cloud/firestore');
const firestore = new Firestore();

exports.processMessage = async (message, context) => {
  const data = JSON.parse(Buffer.from(message.data, 'utf8').toString());
  const expense = {
    amount: data.amount,
    type: data.type,
    date: new Date(),
  };
  await firestore.collection('expenses').add(expense);
  console.log(`Expense added: ${JSON.stringify(expense)}`);
};
_______________________________________________________________________________end.

# 5. Configure Firestore

Firestore is a NoSQL database that allows us to store and query data. To configure Firestore, follow these steps:
1. Go to the Firestore Console and create a new Firestore instance.
2. Create a collection for expenses.

CODE:


 async function getExpenses() {
  const expenses = [];
  const snapshot = await firestore.collection('expenses').get();
  snapshot.forEach((doc) => {
    expenses.push(doc.data());
  });
  return expenses;
}
exports.getExpenses = async (req, res) => {
  const expenses = await getExpenses();
  res.status(200).send(expenses);
};
_______________________________________________________________________________end.


6. Implement a Webhook

A webhook helps Dialogflow communicate with our Cloud Function and get the user's budget information. 
A webhook is a way for the Cloud Function to communicate with the Dialogflow agent and respond to the user's request.
To implement a webhook, follow these steps:
1. Write code in the Cloud Function that queries Firestore for the user's expenses.
2. Format the data as a response that Dialogflow can understand.
3. Implement the response as a webhook in the Cloud Function.

CODE:

exports.processMessage = async (message, context) => {
  const data = JSON.parse(Buffer.from(message.data, 'utf8').toString());
  const expense = {
    amount: data.amount,
    type: data.type,
    date: new Date(),
  };
  await firestore.collection('expenses').add(expense);
  console.log(`Expense added: ${JSON.stringify(expense)}`);

  const intent = await detectIntent(projectId, sessionId, data.message, languageCode);
  const expenses = await getExpenses();
  const response = `You have spent $${calculateTotal(expenses)} on expenses.`;
  const result = {
    fulfillmentText: response,
  };
  return result;
};

