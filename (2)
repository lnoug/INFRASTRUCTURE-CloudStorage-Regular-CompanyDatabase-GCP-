# 5. Create a Kubernetes cluster

Create a Kubernetes cluster to host your chatbot application. You can create a Kubernetes cluster using the Google Cloud Console or the gcloud command-line tool.
Here I created a Kubernetes cluster using gcloud:

CODE:
$ gcloud container clusters create my-chatbot-cluster --num-nodes=3 --machine-type=n1-standard-2 --zone=us-central1-a --service-account=chatbot-sa@my-finance-chatbot-app.iam.gserviceaccount.com
_______________________________________________________________________________end.
This creates a new Kubernetes cluster named my-chatbot-cluster with 3 nodes of type n1-standard-2 in the us-central1-a zone, and associates it with the chatbot-sa (#3) service account

# 6. Build and deploy the chatbot application

Build and deploy the chatbot application to the Kubernetes cluster. You can use a Dockerfile and Kubernetes manifests to build and deploy the application, and use Google Container Registry to store the Docker image. (Check my Repository -chatbot-Customer-Service-GCP-expert-(3)- for more details)
Here's the infrastructure code using Terraform to build and deploy the chatbot application

CODE:
resource "google_container_registry_repository" "chatbot_repository" {
  name = "chatbot"
}

resource "docker_registry_image" "chatbot_image" {
  name = "${google_container_registry_repository.chatbot_repository.name}:latest"
  build {
    context = "."
    dockerfile = "Dockerfile"
    tags = ["latest"]
  }
}

resource "kubernetes_deployment" "chatbot_deployment" {
  metadata {
    name = "chatbot"
  }

  spec {
    replicas = 3

    selector {
      match_labels = {
        app = "chatbot"
      }
    }

    template {
      metadata {
        labels = {
          app = "chatbot"
        }
      }

      spec {
        container {
          name = "chatbot"
          image = "${google_container_registry_repository.chatbot_repository.name}:latest"
          ports {
            container_port = 8000
          }
        }
      }
    }
  }
}

resource "kubernetes_service" "chatbot_service" {
  metadata {
    name = "chatbot-service"
  }

  spec {
    selector = {
      app = "chatbot"
    }

    port {
      name = "http"
      port = 80
      target_port = 8000
    }

    type = "LoadBalancer"
  }
}
_______________________________________________________________________________end.

This infrastructure code uses Terraform to create a Google Container Registry repository for the chatbot application, build a Docker image from the Dockerfile, deploy the chatbot application to the Kubernetes cluster using a Kubernetes deployment and service, and expose the chatbot application to the internet using a load balancer.



