# 4. Create a Cloud Function

A Cloud Function is a piece of code that runs in response to an event. In our case, the Cloud Function will run when a new message is received from Pub/Sub. To create a Cloud Function, follow these steps:

1. Go to the Cloud Functions Console and create a new function.
2. Create a function that is triggered by the Pub/Sub subscription.
3. Write code that parses the message and stores it in Firestore.

CODE:
const {Firestore} = require('@google-cloud/firestore');
const firestore = new Firestore();

exports.processMessage = async (message, context) => {
  const data = JSON.parse(Buffer.from(message.data, 'utf8').toString());
  const expense = {
    amount: data.amount,
    type: data.type,
    date: new Date(),
  };
  await firestore.collection('expenses').add(expense);
  console.log(`Expense added: ${JSON.stringify(expense)}`);
};
_______________________________________________________________________________end.

# 5. Configure Firestore

B Firestore is a NoSQL database that allows us to store and query data. To configure Firestore, follow these steps:
1. Go to the Firestore Console and create a new Firestore instance.
2. Create a collection for expenses.

CODE:


 async function getExpenses() {
  const expenses = [];
  const snapshot = await firestore.collection('expenses').get();
  snapshot.forEach((doc) => {
    expenses.push(doc.data());
  });
  return expenses;
}
_______________________________________________________________________________end.


6. Implement a Webhook

A webhook is a way for Dialogflow to communicate with our Cloud Function and get the user's budget information. 

To implement a webhook, follow these steps:
1. Write code that queries Firestore for the user's expenses.
2. Write code that returns the response to Dialogflow.

CODE:

async function handleWebhook(req, res) {
  const parameters = req.body.queryResult.parameters;
  const intent = req.body.queryResult.intent.displayName;
  
  if (intent === 'add-expense') {
    const data = {
      type: parameters.type,
      amount: parameters.amount,
    };
    await publishMessage('expenses', data);
    const response = `Added ${data.amount} dollars for ${data.type}.`;
    res.json({fulfillmentText: response});
  } else if (intent === 'show-budget') {
    const expenses = await getExpenses();
    const total = expenses.reduce((acc, expense) => acc + expense.amount, 0);
    const response = `Your total expenses are ${total} dollars.`;
    res.json({fulfillmentText: response});
  }
}



