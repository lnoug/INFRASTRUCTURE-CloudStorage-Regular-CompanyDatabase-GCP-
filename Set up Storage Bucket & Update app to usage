#6: Set up a Cloud Storage Bucket
Now that we have our web application on the internet, we need a place to store all the data that people upload using our web application. 
We'll use Google Cloud Storage to create a new bucket where we can store all the data securely.
To set up a Cloud Storage bucket, you can use the Cloud Console or the Cloud Storage API.


CODE:

gsutil mb gs://BUCKET_NAME

Output:
The output of this step will be a new Cloud Storage bucket created on GCP.


#7: Update the Application to Use Cloud Storage and Cloud Pub/Sub
To update the application to use Cloud Storage and Cloud Pub/Sub, we will modify the code in main.py to use the Google Cloud Storage and Cloud Pub/Sub libraries.

CODE:

from flask import Flask, request, redirect, url_for, render_template
from google.cloud import storage, pubsub_v1
import base64
import json

app = Flask(__name__)
bucket_name = os.environ['BUCKET_NAME']
topic_name = os.environ['TOPIC_NAME']
publisher = pubsub_v1.PublisherClient()
storage_client = storage.Client()

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/upload', methods=['POST'])
def upload():
    file = request.files['file']
    if file:
        filename = file.filename
        bucket = storage_client.bucket(bucket_name)
        blob = bucket.blob(filename)
        blob.upload_from_string(file.read(), content_type=file.content_type)
        message = {'bucket': bucket_name, 'filename': filename}
        message_data = json.dumps(message).encode('utf-8')
        topic_path = publisher.topic_path(storage_client.project, topic_name)
        publish_future = publisher.publish(topic_path, data=message_data)
        publish_future.result()
        return redirect(url_for('home'))

if __name__ == '__main__':
    app.run()
    
    
Output:
The output of this step will be updated code for your web application that uses Cloud Storage and Cloud Pub/Sub to store and process data.
