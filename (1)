# 1. Create a new project & enable necessary APIs
Create a new GCP project using the Google Cloud Console or the gcloud command-line tool and Enable the required APIs 

CODE:

gcloud projects create <PROJECT_ID>
gcloud config set project <PROJECT_ID>
___________________________________________________________________________________________________end.
gcloud services enable dialogflow.googleapis.com
gcloud services enable cloudfunctions.googleapis.com
gcloud services enable pubsub.googleapis.com
gcloud services enable firestore.googleapis.com
___________________________________________________________________________________________________end.
This creates a new GCP project with name of your choice and enable the required APIs for the project such as Dialogflow API, Cloud Functions API, Pub/Sub API, and Firestore API. 



# 2. Set up a Dialogflow Agent

1. Go to the Dialogflow Console and create a new agent.
2. Define the agent's default language and time zone.
3. Create an intent that represents the user's request to add a new expense to their budget.
4. Create an intent that represents the user's request to view their current budget.
5. Create an entity that represents the type of expense (e.g., groceries, rent, utilities).

CODE:

const dialogflow = require('dialogflow');
const uuid = require('uuid');

const sessionClient = new dialogflow.SessionsClient();

async function detectIntent(projectId, sessionId, query, languageCode) {
  const sessionPath = sessionClient.projectAgentSessionPath(projectId, sessionId);
  
  const request = {
    session: sessionPath,
    queryInput: {
      text: {
        text: query,
        languageCode: languageCode,
      },
    },
  };
  
  const responses = await sessionClient.detectIntent(request);
  return responses[0].queryResult;
}
___________________________________________________________________________________________________end.

# 3.  Configure Pub/Sub
Pub/Sub is a messaging service that allows us to send messages between different parts of our application

1. Go to the Pub/Sub Console and create a new topic for expense messages.
2. Create a subscription to the topic that triggers a Cloud Function when a new message is received.

CODE:

const {PubSub} = require('@google-cloud/pubsub');
const pubsub = new PubSub();

async function publishMessage(topicName, data) {
  const topic = pubsub.topic(topicName);
  const dataBuffer = Buffer.from(JSON.stringify(data));
  const messageId = await topic.publish(dataBuffer);
  console.log(`Message ${messageId} published to ${topicName}`);
}

exports.publishMessage = async (req, res) => {
  const data = req.body;
  const topicName = 'expenses';
  await publishMessage(topicName, data);
  res.status(200).send('Message published.');
};
___________________________________________________________________________________________________end.

